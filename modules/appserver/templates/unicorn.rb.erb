APP_ROOT = "/data/<%= name %>"

worker_processes <%= unicorn_workers %>
working_directory APP_ROOT + "/current"

timeout 180

listen APP_ROOT + "/shared/sockets/unicorn.sock", :backlog => 1024

pid APP_ROOT + "/shared/pids/unicorn.pid"

stderr_path APP_ROOT + "/shared/log/unicorn.stderr.log"

preload_app true

GC.respond_to?(:copy_on_write_friendly=) and  GC.copy_on_write_friendly = true

before_fork do |server, worker|
  ENV["BUNDLE_GEMFILE"] = APP_ROOT + "/current/Gemfile"

  defined?(ActiveRecord::Base) and ActiveRecord::Base.connection.disconnect!

  old_pid = APP_ROOT + "/shared/pids/unicorn.pid.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else killed the worker
    end
  end
end

after_fork do |server, worker|
  defined?(ActiveRecord::Base) and ActiveRecord::Base.establish_connection

  defined?(Rails) and Rails.cache.respond_to?(:reconnect) and Rails.cache.reconnect
end
